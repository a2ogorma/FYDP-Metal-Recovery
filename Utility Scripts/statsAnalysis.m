clear x
%p = anovan([resultsEconomic.totalCapitalInvestment],{[paramSetPrecious.V_app],[paramSetPrecious.Q],[paramSetPrecious.tfinal],[paramSetPrecious.length],[paramSetPrecious.height],[paramSetPrecious.n_units],[paramSetPrecious.vol_bed]},'model',1,'varnames',{'Vapp','Q','time','length','height','units','bedvol'},'continuous',[1,2,4,5,7])
PsolidPCB = [initSetPrecious.solidPCB];
Psolution = [initSetPrecious.solution];
BsolidPCB = [initSetPrecious.solidPCB];
Bsolution = [initSetPrecious.solution];
x(1).name = 'Radius of initial particles (m)';
x(1).valsPrec = [PsolidPCB.r_particles];
x(1).valsBase = [BsolidPCB.r_particles];
x(2).name = 'Mass of PCB loaded (kg)';
x(2).valsPrec = [PsolidPCB.m_PCB_total];
x(2).valsBase = [BsolidPCB.m_PCB_total];
x(3).name = 'Flowrate (L/s)';
x(3).valsPrec = [paramSetPrecious.Q];
x(3).valsBase = [paramSetBase.Q];
x(4).name = 'Fe3+ conc (M)';
x(4).valsPrec = [Psolution.Ci_Fe3_cell];
x(4).valsBase = [Psolution.Ci_Fe3_cell];
x(5).name = 'Cycle Time (h)';
x(5).valsPrec = [paramSetPrecious.tfinal]./3600;
x(5).valsBase = [paramSetBase.tfinal]./3600;
x(6).name = 'Cathode length (m)';
x(6).valsPrec = [paramSetPrecious.length];
x(6).valsBase = [paramSetBase.length];
x(7).name = 'Cathode height (m)';
x(7).valsPrec = [paramSetPrecious.height];
x(7).valsBase = [paramSetBase.height];
x(8).name = 'Number of anode-cathode pairs';
x(8).valsPrec = [paramSetPrecious.n_units];
x(8).valsBase = [paramSetBase.n_units];
x(9).name = 'Leaching vessel volume (L)';
x(9).valsPrec = [paramSetPrecious.vol_bed];
x(9).valsBase = [paramSetBase.vol_bed];
x(10).name = 'Applied voltage (V)';
x(10).valsPrec = [paramSetPrecious.V_app];
x(10).valsBase = [paramSetBase.V_app];
x(11).name = 'Mass loaded/volume (kg/L)';
x(11).valsPrec = x(2).valsPrec./x(9).valsPrec;
x(11).valsBase = x(2).valsBase./x(9).valsBase;
for j = 1:1:size(x,2)
    xpval = x(j).valsPrec;
    xbval = x(j).valsBase;
    xpvaladj = (xpval-min(xpval))./(max(xpval)-min(xpval));
    xbvaladj = (xbval-min(xbval))./(max(xbval)-min(xbval));
    nameval = x(j).name;
    %paybackPeriod
    yy = [resultsEconomic.metrics];
    y = [yy.paybackPeriod];
    mdl = fitlm(xpval,y);
    mdladj = fitlm(xpvaladj,y);
    slope = mdl.Coefficients.Estimate(2);
    slopeadj = mdladj.Coefficients.Estimate(2);
    pvalue = mdl.Coefficients.pValue(2);
    stats.paybackPeriod(j).name = nameval;
    stats.paybackPeriod(j).pval = pvalue;
    stats.paybackPeriod(j).slope = slope;
    stats.paybackPeriod(j).slopeadj = slopeadj;
    mdl = fitlm(xbval,y);
    mdladj = fitlm(xbvaladj,y);
    slope = mdl.Coefficients.Estimate(2);
    slopeadj = mdladj.Coefficients.Estimate(2);
    pvalue = mdl.Coefficients.pValue(2);
    stats.paybackPeriod(j).nameb = nameval;
    stats.paybackPeriod(j).pvalb = pvalue;
    stats.paybackPeriod(j).slopeb = slope;
    stats.paybackPeriod(j).slopeadjb = slopeadj;
    stats.monteCarlo.paybackPeriod.max = max(y);
    stats.monteCarlo.paybackPeriod.min = min(y);
    stats.monteCarlo.paybackPeriod.mean = mean(y);
    stats.monteCarlo.paybackPeriod.vals = y;
    %percentOp_of_Rev
    yy = [resultsEconomic.metrics];
    y = [yy.percentOp_of_Rev];
    mdl = fitlm(xpval,y);
    mdladj = fitlm(xpvaladj,y);
    slope = mdl.Coefficients.Estimate(2);
    slopeadj = mdladj.Coefficients.Estimate(2);
    pvalue = mdl.Coefficients.pValue(2);
    stats.percentOp_of_Rev(j).name = nameval;
    stats.percentOp_of_Rev(j).pval = pvalue;
    stats.percentOp_of_Rev(j).slope = slope;
    stats.percentOp_of_Rev(j).slopeadj = slopeadj;
    mdl = fitlm(xbval,y);
    mdladj = fitlm(xbvaladj,y);
    slope = mdl.Coefficients.Estimate(2);
    slopeadj = mdladj.Coefficients.Estimate(2);
    pvalue = mdl.Coefficients.pValue(2);
    stats.percentOp_of_Rev(j).nameb = nameval;
    stats.percentOp_of_Rev(j).pvalb = pvalue;
    stats.percentOp_of_Rev(j).slopeb = slope;
    stats.percentOp_of_Rev(j).slopeadjb = slopeadj;
    stats.monteCarlo.percentOp_of_Rev.max = max(y);
    stats.monteCarlo.percentOp_of_Rev.min = min(y);
    stats.monteCarlo.percentOp_of_Rev.mean = mean(y);
    stats.monteCarlo.percentOp_of_Rev.vals = y;
    %netAnnualafterTax
    yy = [resultsEconomic.metrics];
    y = [yy.netAnnualafterTax];
    mdl = fitlm(xpval,y);
    mdladj = fitlm(xpvaladj,y);
    slope = mdl.Coefficients.Estimate(2);
    slopeadj = mdladj.Coefficients.Estimate(2);
    pvalue = mdl.Coefficients.pValue(2);
    stats.netAnnualafterTax(j).name = nameval;
    stats.netAnnualafterTax(j).pval = pvalue;
    stats.netAnnualafterTax(j).slope = slope;
    stats.netAnnualafterTax(j).slopeadj = slopeadj;
    mdl = fitlm(xbval,y);
    mdladj = fitlm(xbvaladj,y);
    slope = mdl.Coefficients.Estimate(2);
    slopeadj = mdladj.Coefficients.Estimate(2);
    pvalue = mdl.Coefficients.pValue(2);
    stats.netAnnualafterTax(j).nameb = nameval;
    stats.netAnnualafterTax(j).pvalb = pvalue;
    stats.netAnnualafterTax(j).slopeb = slope;
    stats.netAnnualafterTax(j).slopeadjb = slopeadj;
    stats.monteCarlo.netAnnualafterTax.max = max(y);
    stats.monteCarlo.netAnnualafterTax.min = min(y);
    stats.monteCarlo.netAnnualafterTax.mean = mean(y);
    stats.monteCarlo.netAnnualafterTax.vals = y;
    %waterIntensity
    yy = [resultsEnvironmental.metrics];
    y = [yy.waterIntensity];
    mdl = fitlm(xpval,y);
    mdladj = fitlm(xpvaladj,y);
    slope = mdl.Coefficients.Estimate(2);
    slopeadj = mdladj.Coefficients.Estimate(2);
    pvalue = mdl.Coefficients.pValue(2);
    stats.waterIntensity(j).name = nameval;
    stats.waterIntensity(j).pval = pvalue;
    stats.waterIntensity(j).slope = slope;
    stats.waterIntensity(j).slopeadj = slopeadj;
    mdl = fitlm(xbval,y);
    mdladj = fitlm(xbvaladj,y);
    slope = mdl.Coefficients.Estimate(2);
    slopeadj = mdladj.Coefficients.Estimate(2);
    pvalue = mdl.Coefficients.pValue(2);
    stats.waterIntensity(j).nameb = nameval;
    stats.waterIntensity(j).pvalb = pvalue;
    stats.waterIntensity(j).slopeb = slope;
    stats.waterIntensity(j).slopeadjb = slopeadj;
    stats.monteCarlo.waterIntensity.max = max(y);
    stats.monteCarlo.waterIntensity.min = min(y);
    stats.monteCarlo.waterIntensity.mean = mean(y);
    stats.monteCarlo.waterIntensity.vals = y;
    %carbonIntensity
    yy = [resultsEnvironmental.metrics];
    y = [yy.carbonIntensity];
    mdl = fitlm(xpval,y);
    mdladj = fitlm(xpvaladj,y);
    slope = mdl.Coefficients.Estimate(2);
    slopeadj = mdladj.Coefficients.Estimate(2);
    pvalue = mdl.Coefficients.pValue(2);
    stats.carbonIntensity(j).name = nameval;
    stats.carbonIntensity(j).pval = pvalue;
    stats.carbonIntensity(j).slope = slope;
    stats.carbonIntensity(j).slopeadj = slopeadj;
    mdl = fitlm(xbval,y);
    mdladj = fitlm(xbvaladj,y);
    slope = mdl.Coefficients.Estimate(2);
    slopeadj = mdladj.Coefficients.Estimate(2);
    pvalue = mdl.Coefficients.pValue(2);
    stats.carbonIntensity(j).nameb = nameval;
    stats.carbonIntensity(j).pvalb = pvalue;
    stats.carbonIntensity(j).slopeb = slope;
    stats.carbonIntensity(j).slopeadjb = slopeadj;
    stats.monteCarlo.carbonIntensity.max = max(y);
    stats.monteCarlo.carbonIntensity.min = min(y);
    stats.monteCarlo.carbonIntensity.mean = mean(y);
    stats.monteCarlo.carbonIntensity.vals = y;
    %wasteRecovery
    yy = [resultsEnvironmental.metrics];
    y = [yy.wasteRecovery];
    mdl = fitlm(xpval,y);
    mdladj = fitlm(xpvaladj,y);
    slope = mdl.Coefficients.Estimate(2);
    slopeadj = mdladj.Coefficients.Estimate(2);
    pvalue = mdl.Coefficients.pValue(2);
    stats.wasteRecovery(j).name = nameval;
    stats.wasteRecovery(j).pval = pvalue;
    stats.wasteRecovery(j).slope = slope;
    stats.wasteRecovery(j).slopeadj = slopeadj;
    mdl = fitlm(xbval,y);
    mdladj = fitlm(xbvaladj,y);
    slope = mdl.Coefficients.Estimate(2);
    slopeadj = mdladj.Coefficients.Estimate(2);
    pvalue = mdl.Coefficients.pValue(2);
    stats.wasteRecovery(j).nameb = nameval;
    stats.wasteRecovery(j).pvalb = pvalue;
    stats.wasteRecovery(j).slopeb = slope;
    stats.wasteRecovery(j).slopeadjb = slopeadj;
    stats.monteCarlo.wasteRecovery.max = max(y);
    stats.monteCarlo.wasteRecovery.min = min(y);
    stats.monteCarlo.wasteRecovery.mean = mean(y);
    stats.monteCarlo.wasteRecovery.vals = y;
    
end
%mdl.Rsquared.Ordinary